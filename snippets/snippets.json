{
  "createStyledComponentFile": {
    "prefix": "sty",
    "body": [
      "import styled from 'styled-components';",
      "",
      "export const ${1:Container} = styled.${2:div}``;",
      ""
    ],
    "description": "Create a React Styled Components file"
  },

  "createStyledComponentFileReactNative": {
    "prefix": "stynative",
    "body": [
      "import styled from 'styled-components/native';",
      "",
      "export const ${1:Container} = styled.${2:View}``;",
      ""
    ],
    "description": "Create a React Native Styled Components file"
  },

  "createSyledComponent": {
    "prefix": "sdiv",
    "body": [
      "export const ${1} = styled.${2:div}``;",
      ""
    ],
    "description": "Create a Styled Component"
  },

  "createSyledComponentReactNative": {
    "prefix": "sview",
    "body": [
      "export const ${1} = styled.${2:View}``;",
      ""
    ],
    "description": "Create a Styled Component"
  },

  "createReactFunctionComponent": {
    "prefix": "rfc",
    "body": [
      "import { Container } from './styles';",
      "",
      "function ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}() {",
      "  return (",
      "    <Container>",
      "      <h1>Hello - ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}</h1>",
      "    </Container>",
      "  );",
      "}",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create a React Functional Component"
  },	

  "createReactFunctionComponentUseState": {
    "prefix": "rfcstate",
    "body": [
      "import { useState } from 'react';",
      "",
      "import { Container } from './styles';",
      "",
      "function ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}() {",
      "  const [myState, setMyState] = useState('');",
      "",
      "  return (",
      "    <Container>",
      "      <h1>Hello - ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}</h1>",
      "    </Container>",
      "  );",
      "}",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create a React Functional Component with useState hook"
  },	
  "createReactFunctionComponentUseEffect": {
    "prefix": "rfceffect",
    "body": [
      "import { useEffect } from 'react';",
      "",
      "import { Container } from './styles';",
      "",
      "function ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}() {",
      "  useEffect(() => {",
      "    console.log('myEffect');",
      "  }, []);",
      "",
      "  return (",
      "    <Container>",
      "      <h1>Hello - ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}</h1>",
      "    </Container>",
      "  );",
      "}",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create a React Functional Component with useEffect hook"
  },	

  "createReactFunctionComponentWithUseStateUseEffectUseCalllback": {
    "prefix": "rfcall",
    "body": [
      "import { useCallback, useEffect, useState } from 'react';",
      "",
      "import { Container } from './styles';",
      "",
      "function ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}() {",
      "  const [myState, setMyState] = useState('');",
      "",
      "  useEffect(() => {",
      "    setMyState('');",
      "  }, []);",
      "",
      "  const myCallback = useCallback(() => {",
      "    console.log(myState);",
      "  }, [myState]);",
      "",
      "  return (",
      "    <Container>",
      "      <h1>Hello - ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}</h1>",
      "      {myCallback()}",
      "    </Container>",
      "  );",
      "}",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create React Functional Component with useEffect, useState and useCallback hooks"
  },

  "useEffect": {
    "prefix": "uef",
    "body": [
      "useEffect(() => {",
      "",
      "}, []);"
    ],
    "description": "useEffect Hook"
  },

  "useState": {
    "prefix": "ust",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"],
    "description": "useState hook"
  },

  "useCallback": {
    "prefix": "uca",
    "body": [
      "const ${1} = useCallback(() => {",
      "",
      "}, []);"
    ],
    "description": "useCallback hook"
  },
  "useMemo": {
    "prefix": "ume",
    "body": [
      "const ${1} = useMemo(() => {",
      "",
      "}, []);"
    ],
    "description": "useMemo hook"
  },
  "createTypes": {
    "prefix": "rxtype",
    "body": [
      "export const START_FETCH = '@${1}/START_FETCH'",
      "export const DONE_FETCH = '@${1}/DONE_FETCH'",
      ""
    ],
    "description": "Create a Redux Type"
  },

  "createReducer": {
    "prefix": "rxreducer",
    "body": [
      "import * as Types from './types';",
      "",
      "const INITIAL_STATE = {",
      "  data: null,",
      "  loading: false,",
      "};",
      "",
      "export default (state = INITIAL_STATE, action) => {",
      "  switch (action.type) {",
      "    case Types.START_FETCH:",
      "      return { ...state, loading: true };",
      "    case Types.DONE_FETCH:",
      "      return { ...state, loading: false };",
      "    default:",
      "      return state;",
      "  }",
      "};",
      ""
    ],
    "description": "Create a Redux Reducer"
  },
  "createAction": {
    "prefix": "rxaction",
    "body": [
      "import * as Types from './types';",
      "",
      "export const ${1} = () => async dispatch  => {",
      "  try {",
      "    dispatch({ type: Types.START_FETCH });",
      "    dispatch({ type: Types.DONE_FETCH });",
      "  } catch {",
      "  //error",
      "  }",
      "}"
    ],
    "description": "Create a Redux Action"
  }
}