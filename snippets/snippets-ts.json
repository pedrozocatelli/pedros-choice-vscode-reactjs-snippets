{
  "createStyledComponentFile": {
    "prefix": "sty",
    "body": [
      "import styled from 'styled-components';",
      "",
      "export const ${1:Container} = styled.${2:div}``;",
      ""
    ],
    "description": "Create a React Styled Components file"
  },

  "createStyledComponentFileReactNative": {
    "prefix": "stynative",
    "body": [
      "import styled from 'styled-components/native';",
      "",
      "export const ${1:Container} = styled.${2:View}``;",
      ""
    ],
    "description": "Create a React Native Styled Components file"
  },

  "createSyledComponent": {
    "prefix": "sdiv",
    "body": [
      "export const ${1} = styled.${2:div}``;",
      ""
    ],
    "description": "Create a Styled Component"
  },

  "createSyledComponentReactNative": {
    "prefix": "sview",
    "body": [
      "export const ${1} = styled.${2:View}``;",
      ""
    ],
    "description": "Create a Styled Component"
  },

  "createReactFunctionComponent": {
    "prefix": "rfc",
    "body": [
      "import { Container } from './styles';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}: React.FC = () => {",
      "  return (",
      "    <Container>",
      "      <h1>Hello - ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}</h1>",
      "    </Container>",
      "  );",
      "};",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create a React Functional Component - Typescript"
  },
  
  "createInterface": {
    "prefix": "itf",
    "body": [
      "interface ${1} {",
      "  myProps?: string;",
      "};",
      ""
    ],
    "description": "Create an Interface"
  },
  "createReactFunctionComponentUseState": {
    "prefix": "rfcstate",
    "body": [
      "import { useState } from 'react';",
      "",
      "import { Container } from './styles';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}: React.FC = () => {",
      "  const [myState, setMyState] = useState('');",
      "",
      "  return (",
      "    <Container>",
      "      <h1>Hello - ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}</h1>",
      "    </Container>",
      "  );",
      "};",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create a React Functional Component with useState hook"
  },
  "createReactFunctionComponentUseEffect": {
    "prefix": "rfceffect",
    "body": [
      "import { useEffect } from 'react';",
      "",
      "import { Container } from './styles';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}: React.FC = () => {",
      "  useEffect(() => {",
      "    console.log('myEffect');",
      "  }, []);",
      "",
      "  return (",
      "    <Container>",
      "      <h1>Hello - ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}</h1>",
      "    </Container>",
      "  );",
      "};",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create a React Functional Component with useEffect hook"
  },

  "createReactFunctionComponentWithUseStateUseEffectUseCalllback": {
    "prefix": "rfcall",
    "body": [
      "import { useCallback, useEffect, useState } from 'react';",
      "",
      "import { Container } from './styles';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}: React.FC = () => {",
      "  const [myState, setMyState] = useState('');",
      "",
      "  useEffect(() => {",
      "    setMyState('');",
      "  }, []);",
      "",
      "  const myCallback = useCallback(() => {",
      "    console.log(myState);",
      "  }, [myState]);",
      "",
      "  return (",
      "    <Container>",
      "      <h1>Hello - ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}</h1>",
      "    </Container>",
      "  );",
      "};",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create a React Functional Component with useEffect, useState and useCallback hooks"
  },
  "useEffect": {
    "prefix": "uef",
    "body": [
      "useEffect(() => {",
      "",
      "}, []);"
    ],
    "description": "useEffect Hook"
  },
  "useState": {
    "prefix": "ust",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"],
    "description": "useState Hook"
  },
  "useCallback": {
    "prefix": "uca",
    "body": [
      "const ${1} = useCallback(() => {",
      "",
      "}, []);"
    ],
    "description": "useCallback Hook"
  },
  "useMemo": {
    "prefix": "ume",
    "body": [
      "const ${1} = useMemo(() => {",
      "",
      "}, []);"
    ],
    "description": "useMemo hook"
  },
  "createTypes": {
    "prefix": "rxtype",
    "body": [
      "export const START_FETCH = '@${1}/START_FETCH';",
      "export const DONE_FETCH = '@${1}/DONE_FETCH';",
      "export const GET_DATA = '@${1}/GET_DATA';",
      "",
      "interface ${1} {",
      "  myData: string;",
      "}",
      "",
      "export interface ${1}State {",
      "  readonly loading: {",
      "    getData: boolean;",
      "  };",
      "  readonly data: ${1}[] | null;",
      "}",
      "",
      "interface StartFetch {",
      "  type: typeof START_FETCH;",
      "  kind: string;",
      "}",
      "",
      "interface DoneFetch {",
      "  type: typeof DONE_FETCH;",
      "  kind: string;",
      "}",
      "",
      "interface GetData {",
      "  type: typeof GET_DATA;",
      "  data: ${1}[];",
      "}",
      "",
      "export type ${1}ActionTypes = StartFetch | DoneFetch | GetData;",
      ""
    ],
    "description": "Create a Redux Type"
  },
  "createReducer": {
    "prefix": "rxreducer",
    "body": [
      "import * as Types from './types';",
      "",
      "const INITIAL_STATE = {",
      "  data: null,",
      "  loading: {",
      "    getData: false,",
      "  },",
      "};",
      "",
      "export default (",
      "  state = INITIAL_STATE,",
      "  action: Types.${1}ActionTypes,",
      "): Types.${1}State => {",
      "  switch (action.type) {",
      "    case Types.START_FETCH:",
      "      return { ...state, loading: { ...state.loading, [action.kind]: true } };",
      "    case Types.DONE_FETCH:",
      "      return { ...state, loading: { ...state.loading, [action.kind]: false } };",
      "    case Types.GET_DATA:",
      "      return { ...state, data: action.data };",
      "    default:",
      "      return state;",
      "  }",
      "};",
      ""
    ],
    "description": "Create a Redux Reducer"
  },
  "createAction": {
    "prefix": "rxaction",
    "body": [
      "import { Action } from 'redux';",
      "import { ThunkAction } from 'redux-thunk';",
      "import { StoreState } from 'store';",
      "import * as Types from './types';",
      "",
      "export const ${1} = (): ThunkAction<",
      "  void,",
      "  StoreState,",
      "  unknown,",
      "  Action<string>",
      "> => async dispatch => {",
      "  try {",
      "    dispatch({ type: Types.START_FETCH });",
      "    dispatch({ type: Types.DONE_FETCH });",
      "  } catch {",
      "    // error",
      "  }",
      "};",
      ""
    ],
    "description": "Create a Redux Action"
  },
  "reactotronConfig": {
    "prefix": "tronconfig",
    "body": [
      "import Reactotron from 'reactotron-react-js';",
      "import { reactotronRedux } from 'reactotron-redux';",
      "",
      "declare global {",
      "  interface Console {",
      "    tron: any;",
      "  }",
      "}",
      "",
      "if (process.env.NODE_ENV === 'development') {",
      "  const tron = Reactotron.configure().use(reactotronRedux()).connect();",
      "",
      "  tron.clear!();",
      "",
      "  console.tron = tron;",
      "}",
      ""
    ],
    "description": "Create a Reactotron Config"
  }
}